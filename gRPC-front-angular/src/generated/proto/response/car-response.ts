// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "response/car-response.proto" (package "response", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { VersionResponse } from "./versionResponse";
/**
 * @generated from protobuf message response.CarResponse
 */
export interface CarResponse {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string model = 2;
     */
    model: string;
    /**
     * @generated from protobuf field: string manufacturer = 3;
     */
    manufacturer: string;
    /**
     * @generated from protobuf field: response.VersionResponse version = 4;
     */
    version?: VersionResponse;
}
// @generated message type with reflection information, may provide speed optimized methods
class CarResponse$Type extends MessageType<CarResponse> {
    constructor() {
        super("response.CarResponse", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "model", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "manufacturer", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "version", kind: "message", T: () => VersionResponse }
        ]);
    }
    create(value?: PartialMessage<CarResponse>): CarResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.model = "";
        message.manufacturer = "";
        if (value !== undefined)
            reflectionMergePartial<CarResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CarResponse): CarResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string model */ 2:
                    message.model = reader.string();
                    break;
                case /* string manufacturer */ 3:
                    message.manufacturer = reader.string();
                    break;
                case /* response.VersionResponse version */ 4:
                    message.version = VersionResponse.internalBinaryRead(reader, reader.uint32(), options, message.version);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CarResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string model = 2; */
        if (message.model !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.model);
        /* string manufacturer = 3; */
        if (message.manufacturer !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.manufacturer);
        /* response.VersionResponse version = 4; */
        if (message.version)
            VersionResponse.internalBinaryWrite(message.version, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message response.CarResponse
 */
export const CarResponse = new CarResponse$Type();
