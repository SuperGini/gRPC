// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "request/update/car-update.proto" (package "request.update", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Type } from "../type";
/**
 * @generated from protobuf message request.update.CarUpdateVersion
 */
export interface CarUpdateVersion {
    /**
     * @generated from protobuf field: int32 productionYear = 1;
     */
    productionYear: number;
    /**
     * @generated from protobuf field: request.Type type = 2;
     */
    type: Type;
    /**
     * @generated from protobuf field: request.update.CarIdUpdate carId = 3;
     */
    carId?: CarIdUpdate;
}
/**
 * @generated from protobuf message request.update.CarIdUpdate
 */
export interface CarIdUpdate {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class CarUpdateVersion$Type extends MessageType<CarUpdateVersion> {
    constructor() {
        super("request.update.CarUpdateVersion", [
            { no: 1, name: "productionYear", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "type", kind: "enum", T: () => ["request.Type", Type] },
            { no: 3, name: "carId", kind: "message", T: () => CarIdUpdate }
        ]);
    }
    create(value?: PartialMessage<CarUpdateVersion>): CarUpdateVersion {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.productionYear = 0;
        message.type = 0;
        if (value !== undefined)
            reflectionMergePartial<CarUpdateVersion>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CarUpdateVersion): CarUpdateVersion {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 productionYear */ 1:
                    message.productionYear = reader.int32();
                    break;
                case /* request.Type type */ 2:
                    message.type = reader.int32();
                    break;
                case /* request.update.CarIdUpdate carId */ 3:
                    message.carId = CarIdUpdate.internalBinaryRead(reader, reader.uint32(), options, message.carId);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CarUpdateVersion, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 productionYear = 1; */
        if (message.productionYear !== 0)
            writer.tag(1, WireType.Varint).int32(message.productionYear);
        /* request.Type type = 2; */
        if (message.type !== 0)
            writer.tag(2, WireType.Varint).int32(message.type);
        /* request.update.CarIdUpdate carId = 3; */
        if (message.carId)
            CarIdUpdate.internalBinaryWrite(message.carId, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message request.update.CarUpdateVersion
 */
export const CarUpdateVersion = new CarUpdateVersion$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CarIdUpdate$Type extends MessageType<CarIdUpdate> {
    constructor() {
        super("request.update.CarIdUpdate", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CarIdUpdate>): CarIdUpdate {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        if (value !== undefined)
            reflectionMergePartial<CarIdUpdate>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CarIdUpdate): CarIdUpdate {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CarIdUpdate, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message request.update.CarIdUpdate
 */
export const CarIdUpdate = new CarIdUpdate$Type();
